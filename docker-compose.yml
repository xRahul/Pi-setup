services:

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    hostname: watchtower
    platform: "linux/arm64"
    restart: always
    dns:
      - 10.8.1.3
      - 8.8.8.8
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every two hours
      WATCHTOWER_HTTP_API_METRICS: "true"
      WATCHTOWER_HTTP_API_TOKEN: ${WATCHTOWER_HTTP_API_TOKEN}
      WATCHTOWER_NOTIFICATION_REPORT: "true"
      WATCHTOWER_NOTIFICATION_URL: ${WATCHTOWER_NOTIFICATION_URL}
      WATCHTOWER_NOTIFICATION_TEMPLATE: |
        {{- if .Report -}}
          {{- with .Report -}}
        {{len .Scanned}} Scanned, {{len .Updated}} Updated, {{len .Failed}} Failed
              {{- range .Updated}}
        - {{.Name}} ({{.ImageName}}): {{.CurrentImageID.ShortID}} updated to {{.LatestImageID.ShortID}}
              {{- end -}}
              {{- range .Fresh}}
        - {{.Name}} ({{.ImageName}}): {{.State}}
            {{- end -}}
            {{- range .Skipped}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
            {{- range .Failed}}
        - {{.Name}} ({{.ImageName}}): {{.State}}: {{.Error}}
            {{- end -}}
          {{- end -}}
        {{- else -}}
          {{range .Entries -}}{{.Message}}{{"\n"}}{{- end -}}
        {{- end -}}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    networks:
      wg-easy:
        ipv4_address: 10.8.1.13

  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the server's hostname (clients will connect to):
      - WG_HOST=${WG_EASY__WG_HOST}
      # ‚ö†Ô∏è Change the Web UI Password:
      - PASSWORD=${WG_EASY__PASSWORD}
      # üí° This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.3
      #- WG_DEFAULT_DNS=1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4
      - WG_DEFAULT_ADDRESS=10.8.0.x
      # traffic stats
      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=2
    volumes:
      - './wg-easy-vol:/etc/wireguard'
    ports:
      - "51820:51820/udp"
      # - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2



  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the Web UI Password:
      - WEBPASSWORD=${PIHOLE__WEBPASSWORD}
      - TZ=${DEFAULT_TZ}
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "5353:80/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3

  cloudflared-dns:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-dns-tunnel
    hostname: cloudflareddnstunnel
    user: 1000:1000 # should be owner of volumes
    platform: "linux/arm64"
    restart: always
    command: proxy-dns
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.0.0.1/dns-query,https://1.1.1.1/dns-query"
      # Listen on an unprivileged port
      TUNNEL_DNS_PORT: 5053
      # Listen on all interfaces
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      # Tunnel metrics
      TUNNEL_METRICS: 10.8.1.4:43697
    volumes:
      - './cloudflared-dns/tunnel:/etc/cloudflared'
    # ports:
      # - "43697:43697/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.4

  caddy:
    image: slxpi/caddy-cloudflare
    container_name: caddy-cloudflare-web-server
    hostname: caddycloudflarewebserver
    platform: "linux/arm64"
    user: 1000:1000 # should be owner of volumes
    build:
      context: .
      dockerfile: caddy.Dockerfile
    restart: always
    cap_add:
      - NET_ADMIN
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      wg-easy:
        ipv4_address: 10.8.1.5



  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich_server
    hostname: immichserver
    user: 1000:1000 # should be owner of volumes
    restart: always
    # command: ['start.sh', 'immich']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./.immich_env
    # ports:
      # - 2283:3001
    depends_on:
      - immich_redis
      - immich_database
    networks:
      wg-easy:
        ipv4_address: 10.8.1.6

  immich-machine-learning:
    container_name: immich_machine_learning
    hostname: immichmachinelearning
    restart: always
    user: 1000:1000 # should be owner of volumes
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: ./immich/hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - ${ML_MODEL_CACHE_LOCATION}:/cache
    env_file:
      - ./.immich_env
    networks:
      wg-easy:
        ipv4_address: 10.8.1.8

  immich_redis:
    image: docker.io/redis:6.2-alpine@sha256:e3b17ba9479deec4b7d1eeec1548a253acc5374d68d3b27937fcfe4df8d18c7e
    container_name: immich_redis
    restart: always
    healthcheck:
      test: redis-cli ping || exit 1
    hostname: redis
    env_file:
      - .immich_env
    networks:
      wg-easy:
        ipv4_address: 10.8.1.9

  immich_database:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    container_name: immich_postgres
    restart: always
    hostname: database
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    env_file:
      - ./.immich_env
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command: ["postgres", "-c", "shared_preload_libraries=vectors.so", "-c", 'search_path="$$user", public, vectors', "-c", "logging_collector=on", "-c", "max_wal_size=2GB", "-c", "shared_buffers=512MB", "-c", "wal_compression=on"]
    networks:
      wg-easy:
        ipv4_address: 10.8.1.10





  # photoprism:
  #   ## Use photoprism/photoprism:preview-arm64 for testing preview builds:
  #   image: photoprism/photoprism:arm64
  #   platform: "linux/arm64"
  #   user: 1000:1000 # should be owner of volumes
  #   ## Don't enable automatic restarts until PhotoPrism has been properly configured and tested!
  #   ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue:
  #   ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
  #   # restart: unless-stopped
  #   stop_grace_period: 10s
  #   depends_on:
  #     - mariadb
  #   security_opt:
  #     - seccomp:unconfined
  #     - apparmor:unconfined
  #   ## Server port mapping in the format "Host:Container". To use a different port, change the host port on
  #   ## the left-hand side and keep the container port, e.g. "80:2342" (for HTTP) or "443:2342 (for HTTPS):
  #   # ports:
  #   #   - "2342:2342"
  #   ## Before you start the service, please check the following config options (and change them as needed):
  #   ## https://docs.photoprism.app/getting-started/config-options/
  #   environment:
  #     PHOTOPRISM_ADMIN_USER: ${PHOTOPRISM_ADMIN_USER}                 # admin login username
  #     PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD}          # initial admin password (8-72 characters)
  #     PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
  #     PHOTOPRISM_SITE_URL: "https://photoprism.pi.rahulja.in/"  # server URL in the format "http(s)://domain.name(:port)/(path)"
  #     PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
  #     PHOTOPRISM_DEFAULT_TLS: "false"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
  #     PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
  #     PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
  #     PHOTOPRISM_WORKERS: 2                          # limits the number of indexing workers to reduce system load
  #     PHOTOPRISM_LOG_LEVEL: "warning"                   # log level: trace, debug, info, warning, error, fatal, or panic
  #     PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
  #     PHOTOPRISM_EXPERIMENTAL: "true"               # enables experimental features
  #     PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
  #     PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
  #     PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables Settings in Web UI
  #     PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
  #     PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
  #     PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
  #     PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
  #     PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
  #     PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
  #     PHOTOPRISM_JPEG_QUALITY: 85                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
  #     PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
  #     PHOTOPRISM_UPLOAD_NSFW: "true"                 # allow uploads that MAY be offensive
  #     # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
  #     PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
  #     PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
  #     PHOTOPRISM_DATABASE_NAME: ${DB_DATABASE_NAME}         # MariaDB or MySQL database schema name
  #     PHOTOPRISM_DATABASE_USER: ${DB_USERNAME}         # MariaDB or MySQL database user name
  #     PHOTOPRISM_DATABASE_PASSWORD: ${DB_PASSWORD}       # MariaDB or MySQL database user password
  #     PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
  #     PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
  #     PHOTOPRISM_SITE_AUTHOR: "Rahul Jain"                     # meta site author
  #     ## Video Transcoding (https://docs.photoprism.app/getting-started/advanced/transcoding/):
  #     # PHOTOPRISM_FFMPEG_ENCODER: "software"        # H.264/AVC encoder (software, intel, nvidia, apple, raspberry, or vaapi)
  #     # PHOTOPRISM_FFMPEG_SIZE: "1920"               # video size limit in pixels (720-7680) (default: 3840)
  #     # PHOTOPRISM_FFMPEG_BITRATE: "32"              # video bitrate limit in Mbit/s (default: 50)
  #     ## Run/install on first startup (options: update, gpu, tensorflow, davfs, clean):
  #     # PHOTOPRISM_INIT: "update clean"
  #     ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
  #     # PHOTOPRISM_UID: 1000
  #     # PHOTOPRISM_GID: 1000
  #     # PHOTOPRISM_UMASK: 0000
  #   ## Share hardware devices with FFmpeg and TensorFlow (optional):
  #   ## See: https://www.raspberrypi.com/documentation/accessories/camera.html#driver-differences-when-using-libcamera-or-the-legacy-stack
  #   # devices:
  #   #  - "/dev/video11:/dev/video11" # Video4Linux Video Encode Device (h264_v4l2m2m)
  #   working_dir: "/photoprism" # do not change or remove
  #   ## Storage Folders: "~" is a shortcut for your home directory, "." for the current directory
  #   volumes:
  #     # "/host/folder:/photoprism/folder"                # Example
  #     - ${PHOTOPRISM_UPLOAD_LOCATION}:/photoprism/originals               # Original media files (DO NOT REMOVE)
  #     # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
  #     # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
  #     - "./photoprism_storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.11

  # mariadb:
  #   image: arm64v8/mariadb:11 # ARM64 IMAGE ONLY, DOES NOT WORK ON ARMv7, AMD or Intel
  #   platform: "linux/arm64"
  #   ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue:
  #   ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
  #   restart: unless-stopped
  #   user: 1000:1000 # should be owner of volumes
  #   stop_grace_period: 5s
  #   security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
  #     - seccomp:unconfined
  #     - apparmor:unconfined
  #   command: --innodb-buffer-pool-size=256M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
  #   volumes:
  #     - "./mariadb_database:/var/lib/mysql" # DO NOT REMOVE
  #   environment:
  #     MARIADB_AUTO_UPGRADE: "1"
  #     MARIADB_INITDB_SKIP_TZINFO: "1"
  #     MARIADB_DATABASE: ${DB_DATABASE_NAME}
  #     MARIADB_USER: ${DB_USERNAME}
  #     MARIADB_PASSWORD: ${DB_PASSWORD}
  #     MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.12





  # navidrome:
  #   image: deluan/navidrome:latest
  #   container_name: navidrome
  #   user: 1000:1000 # should be owner of volumes
  #   platform: "linux/arm64"
  #   restart: always
  #   environment:
  #     ND_SCANSCHEDULE: 24h
  #     ND_LOGLEVEL: warn
  #     ND_SESSIONTIMEOUT: 24h
  #     ND_BASEURL: ""
  #     ND_LASTFM_ENABLED: ${LASTFM_ENABLED}
  #     ND_LASTFM_APIKEY: ${LASTFM_APIKEY}
  #     ND_LASTFM_SECRET: ${LASTFM_SECRET}
  #   volumes:
  #     - ${NAVIDROME_DATA_LOCATION}:/data
  #     - ${NAVIDROME_MUSIC_LOCATION}:/music:ro
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.14





  mikochi:
    image: zer0tonin/mikochi:latest
    container_name: mikochi
    user: 1000:1000 # should be owner of volumes
    platform: "linux/arm64"
    restart: always
    environment:
      DATA_DIR: "/data"
      USERNAME: ${MIKOCHI_USERNAME}
      PASSWORD: ${MIKOCHI_PASSWORD}
    volumes:
      - ${MIKOCHI_DATA_LOCATION}:/data
    networks:
      wg-easy:
        ipv4_address: 10.8.1.15




  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    hostname: jellyfin
    user: 1000:1000 # should be owner of volumes
    platform: "linux/arm64"
    restart: always
    volumes:
      - ${JELLYFIN_CONFIG_LOCATION}:/config
      - ${JELLYFIN_CACHE_LOCATION}:/cache
      - type: bind
        source: ${JELLYFIN_MEDIA_LOCATION}
        target: /media
      - type: bind
        source: ${JELLYFIN_DOWNLOAD_LOCATION}
        target: /download
    # Optional - alternative address used for autodiscovery
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.pi.rahulja.in
    networks:
      wg-easy:
        ipv4_address: 10.8.1.16





  archivebox:
    image: archivebox/archivebox:latest
    container_name: archivebox
    platform: "linux/arm64"
    # user: 1000:1000 # should be owner of volumes
    restart: always
    volumes:
      - ${ARCHIVEBOX_DATA_LOCATION}:/data
    environment:
      - ADMIN_USERNAME=${ARCHIVEBOX_ADMIN_USERNAME}            # create an admin user on first run with the given user/pass combo
      - ADMIN_PASSWORD=${ARCHIVEBOX_ADMIN_PASSWORD}
      - ALLOWED_HOSTS=*                   # restrict this to only accept incoming traffic via specific domain name
      - PUBLIC_INDEX=True                 # set to False to prevent anonymous users from viewing snapshot list
      - PUBLIC_SNAPSHOTS=True             # set to False to prevent anonymous users from viewing snapshot content
      - PUBLIC_ADD_VIEW=False             # set to True to allow anonymous users to submit new URLs to archive
      - SEARCH_BACKEND_ENGINE=ripgrep     # tells ArchiveBox to use sonic container below for fast full-text search
      # - SEARCH_BACKEND_HOST_NAME=sonic
      # - SEARCH_BACKEND_PASSWORD=${SONIC_SEARCH_BACKEND_PASSWORD}
      - PUID=1000                        # set to your host user's UID & GID if you encounter permissions issues
      - PGID=1000                        # UID/GIDs <500 may clash with existing users and are not recommended
      # - MEDIA_MAX_SIZE=750m             # increase this filesize limit to allow archiving larger audio/video files
      # - TIMEOUT=60                      # increase this number to 120+ seconds if you see many slow downloads timing out
      # - CHECK_SSL_VALIDITY=True         # set to False to disable strict SSL checking (allows saving URLs w/ broken certs)
      # - SAVE_ARCHIVE_DOT_ORG=True       # set to False to disable submitting all URLs to Archive.org when archiving
      # ...
      # add further configuration options from archivebox/config.py as needed (to apply them only to this container)
      # or set using `docker compose run archivebox config --set SOME_KEY=someval` (to persist config across all containers)
    networks:
      wg-easy:
        ipv4_address: 10.8.1.17



  # archivebox_scheduler:
  #   image: archivebox/archivebox:latest
  #   command: schedule --foreground --update --every=day
  #   environment:
  #     - TIMEOUT=120                       # use a higher timeout than the main container to give slow tasks more time when retrying
  #     # - PUID=502                        # set to your host user's UID & GID if you encounter permissions issues
  #     # - PGID=20
  #   volumes:
  #     - ${ARCHIVEBOX_DATA_LOCATION}:/data
  #   # cpus: 2                               # uncomment / edit these values to limit scheduler container resource consumption
  #   # mem_limit: 2048m
  #   # restart: always


  # sonic:
  #   image: slxpi/valeriansaliou-sonic
  #   container_name: sonic
  #   hostname: sonic
  #   platform: "linux/arm64"
  #   user: 1000:1000 # should be owner of volumes
  #   build:
  #     context: .
  #     dockerfile: sonic.Dockerfile
  #   restart: always
  #   environment:
  #       - SEARCH_BACKEND_PASSWORD=${SONIC_SEARCH_BACKEND_PASSWORD}
  #   volumes:
  #       - ./sonic.cfg:/etc/sonic.cfg
  #       - ${SONIC_DATA_LOCATION}:/var/lib/sonic/store
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.18



  # prometheus:
  #   image: prom/prometheus
  #   container_name: prometheus
  #   hostname: prometheus
  #   user: 1000:1000 # should be owner of volumes
  #   platform: "linux/arm64"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #   restart: always
  #   volumes:
  #     - ./prometheus:/etc/prometheus
  #     - ${PROMETHEUS_DATA_LOCATION}:/prometheus
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.19




  # grafana:
  #   image: grafana/grafana
  #   container_name: grafana
  #   user: 1000:1000 # should be owner of volumes
  #   platform: "linux/arm64"
  #   restart: always
  #   environment:
  #     - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USERNAME}
  #     - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
  #   volumes:
  #     - ${GRAFANA_DATA_SOURCE}:/etc/grafana/provisioning/datasources
  #     - ${GRAFANA_VAR_LIB}:/var/lib/grafana
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.20



  # pihole-exporter:
  #   image: ekofr/pihole-exporter:latest
  #   container_name: pihole-exporter
  #   hostname: piholeexporter
  #   user: 1000:1000 # should be owner of volumes
  #   platform: "linux/arm64"
  #   restart: always
  #   environment:
  #     PIHOLE_HOSTNAME: pihole # Chage to PiHole's IP address or FQDN
  #     PIHOLE_PASSWORD: ${PIHOLE__WEBPASSWORD} # Change to your PiHole's password
  #     INTERVAL: 90s
  #     PORT: 9617
  #   logging:
  #     driver: "json-file"
  #     options:
  #       max-size: "5k"
  #       max-file: "5"
  #   healthcheck:
  #     test: ["CMD", "wget", "--tries=1", "--spider", "http://localhost:9617/metrics"]
  #     interval: 300s
  #     retries: 5
  #     timeout: 10s
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.21



  # wallabag:
  #   image: wallabag/wallabag:latest
  #   container_name: wallabag
  #   hostname: wallabag
  #   platform: "linux/arm64"
  #   user: 1000:1000 # should be owner of volumes
  #   restart: always
  #   environment:
  #     # - MYSQL_ROOT_PASSWORD=${WALLABAG_MYSQL_ROOT_PASSWORD}
  #     - SYMFONY__ENV__DATABASE_DRIVER=pdo_sqlite
  #     # - SYMFONY__ENV__DATABASE_HOST=127.0.0.1
  #     # - SYMFONY__ENV__DATABASE_PORT=3306
  #     - SYMFONY__ENV__DATABASE_NAME=wallabag
  #     # - SYMFONY__ENV__DATABASE_USER=${WALLABAG_MYSQL_USER}
  #     # - SYMFONY__ENV__DATABASE_PASSWORD=${WALLABAG_MYSQL_PASSWORD}
  #     # - SYMFONY__ENV__DATABASE_CHARSET=utf8mb4
  #     # - SYMFONY__ENV__DATABASE_TABLE_PREFIX="wallabag_"
  #     # - SYMFONY__ENV__MAILER_DSN=smtp://127.0.0.1
  #     - SYMFONY__ENV__FROM_EMAIL=wallabag@rahulja.in
  #     - SYMFONY__ENV__DOMAIN_NAME=https://wallabag.pi.rahulja.in
  #     - SYMFONY__ENV__SERVER_NAME="Wallabag - RJ"
  #     # - PUID=1000                        # set to your host user's UID & GID if you encounter permissions issues
  #     # - PGID=1000                        # UID/GIDs <500 may clash with existing users and are not recommended
  #   # ports:
  #   #   - "80"
  #   volumes:
  #     - ${WALLABAG_DATA_LOCATION}:/var/www/wallabag/data
  #     - ${WALLABAG_IMAGES_LOCATION}:/var/www/wallabag/web/assets/images
  #   # healthcheck:
  #   #   test: ["CMD", "wget" ,"--no-verbose", "--tries=1", "--spider", "http://localhost"]
  #   #   interval: 1m
  #   #   timeout: 3s
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.22


  # db:
  #   image: mariadb
  #   environment:
  #     - MYSQL_ROOT_PASSWORD=wallaroot
  #   volumes:
  #     - /opt/wallabag/data:/var/lib/mysql
  #   healthcheck:
  #     test: ["CMD", "mysqladmin" ,"ping", "-h", "localhost"]
  #     interval: 20s
  #     timeout: 3s


  # redis:
  #   image: redis:alpine
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 20s
  #     timeout: 3s


  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ${GLUETUN_DATA_SOURCE}:/gluetun
    environment:
      TZ: ${DEFAULT_TZ}
      # Wireguard
      VPN_SERVICE_PROVIDER: surfshark
      VPN_TYPE: wireguard
      WIREGUARD_PRIVATE_KEY: ${SURFSHARK_WG_PRIVATE_KEY}
      WIREGUARD_ADDRESSES: ${WIREGUARD_ADDRESSES}
      SERVER_COUNTRIES: ${SURFSHARK_SERVER_COUNTRIES}
      # # OpenVPN
      # VPN_SERVICE_PROVIDER: nordvpn
      # VPN_TYPE: openvpn
      # OPENVPN_USER: $NORDVPN_USERNAME
      # OPENVPN_USER: $NORDVPN_PASSWORD
    # ports:
    #   - 9091:9091
    #   - 51413:51413/udp
    #   - 51413:51413
    networks:
      wg-easy:
        ipv4_address: 10.8.1.23




  transmission:
    image: linuxserver/transmission
    container_name: transmission
    restart: always
    network_mode: "service:gluetun"
    volumes:
      - ${TRANSMISSION_CONFIG_SOURCE}:/config
      - ${TRANSMISSION_DOWNLOAD_SOURCE}:/downloads
      - ${TRANSMISSION_WATCH_SOURCE}:/watch
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=${DEFAULT_TZ}
      # - DOCKER_MODS=linuxserver/mods:transmission-floodui
      - DOCKER_MODS=linuxserver/mods:transmission-transmissionic
      - USER=${TRANSMISSION_USERNAME}
      - PASS=${TRANSMISSION_PASSWORD}


  # prowlarr:
  #   image: linuxserver/prowlarr
  #   container_name: prowlarr
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=${DEFAULT_TZ}
  #   volumes:
  #     - ${PROWLARR_CONFIG_SOURCE}:/config
  #   restart: always
  #   network_mode: "service:gluetun"

  # flaresolverr:
  #   image: ghcr.io/flaresolverr/flaresolverr:latest
  #   container_name: flaresolverr
  #   environment:
  #     - LOG_LEVEL=${FLARESOLVERR_LOG_LEVEL:-warn}
  #     - LOG_HTML=${FLARESOLVERR_LOG_HTML:-false}
  #     - CAPTCHA_SOLVER=${FLARESOLVERR_CAPTCHA_SOLVER:-none}
  #     - TZ=${DEFAULT_TZ}
  #   # ports:
  #   #   - "8191:8191"
  #   restart: always
  #   network_mode: "service:gluetun"



  flame:
    image: pawelmalak/flame:multiarch
    container_name: flame
    restart: always
    volumes:
      - ${FLAME_DATA_SOURCE}:/app/data
      - /var/run/docker.sock:/var/run/docker.sock # optional but required for Docker integration
    # ports:
    #   - 5005:5005
    # secrets:
    #   - password # optional but required for (1)
    environment:
      - PASSWORD=${FLAME_PASSWORD}
      # - PASSWORD_FILE=/run/secrets/password # optional but required for (1)
    networks:
      wg-easy:
        ipv4_address: 10.8.1.24


  # plex:
  #   image: lscr.io/linuxserver/plex:latest
  #   container_name: plex
  #   restart: always
  #   environment:
  #     - PUID=1000
  #     - PGID=1000
  #     - TZ=${DEFAULT_TZ}
  #     - VERSION=docker
  #     - PLEX_CLAIM= ${PLEX_CLAIM}
  #   volumes:
  #     - ${PLEX_CONFIG_LOCATION}:/config
  #     - type: bind
  #       source: ${JELLYFIN_MEDIA_LOCATION}
  #       target: /media
  #     - type: bind
  #       source: ${JELLYFIN_DOWNLOAD_LOCATION}
  #       target: /download
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.25



  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    restart: always
    command:
      - serve
    environment:
      - TZ=${DEFAULT_TZ}    # optional: set desired timezone
      - NTFY_LISTEN_HTTP=:8000
      - NTFY_CACHE_FILE=/var/lib/ntfy/cache.db
      - NTFY_AUTH_FILE=/var/lib/ntfy/auth.db
      - NTFY_AUTH_DEFAULT_ACCESS=deny-all
      - NTFY_BEHIND_PROXY=true
      - NTFY_ATTACHMENT_CACHE_DIR=/var/lib/ntfy/attachments
      - NTFY_ENABLE_LOGIN=true
      - NTFY_UPSTREAM_BASE_URL=https://ntfy.sh
      - NTFY_BASE_URL=https://ntfy.pi.rahulja.in
    user: 1000:1000 # optional: replace with your own user/group or uid/gid
    volumes:
      - ${NTFY_CACHE}:/var/cache/ntfy
      - ${NTFY_ETC}:/etc/ntfy
      - ${NTFY_DB}:/var/lib/ntfy/
    # ports:
    #   - 80:80
    # healthcheck: # optional: remember to adapt the host:port to your environment
    #     test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
    #     interval: 60s
    #     timeout: 10s
    #     retries: 3
    #     start_period: 40s
    networks:
      wg-easy:
        ipv4_address: 10.8.1.26



  freshrss:
    image: lscr.io/linuxserver/freshrss:latest
    container_name: freshrss
    restart: always
    dns:
      - 10.8.1.3
      - 8.8.8.8
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${DEFAULT_TZ}
    volumes:
      - ${FRESHRSS_CONFIG_PATH}:/config
    # ports:
    #   - 80:80
    networks:
      wg-easy:
        ipv4_address: 10.8.1.27


# Booked 10.8.1.2 - 10.8.1.27

networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24
