services:

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    platform: "linux/arm64"
    restart: always
    environment:
      WATCHTOWER_CLEANUP: "true"
      WATCHTOWER_POLL_INTERVAL: 7200 # checks for updates every two hours
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock

  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the server's hostname (clients will connect to):
      - WG_HOST=${WG_EASY__WG_HOST}
      # ‚ö†Ô∏è Change the Web UI Password:
      - PASSWORD=${WG_EASY__PASSWORD}
      # üí° This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.3
      #- WG_DEFAULT_DNS=1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4
      - WG_DEFAULT_ADDRESS=10.8.0.x
      # traffic stats
      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=2
    volumes:
      - './wg-easy-vol:/etc/wireguard'
    ports:
      - "51820:51820/udp"
      # - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the Web UI Password:
      - WEBPASSWORD=${PIHOLE__WEBPASSWORD}
      - TZ=${PIHOLE__TZ}
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "5353:80/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3

  cloudflared-dns:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-dns-tunnel
    platform: "linux/arm64"
    restart: always
    command: proxy-dns
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.0.0.1/dns-query,https://1.1.1.1/dns-query"
      # Listen on an unprivileged port
      TUNNEL_DNS_PORT: 5053
      # Listen on all interfaces
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      # Tunnel metrics
      TUNNEL_METRICS: 10.8.1.4:43697
    volumes:
      - './cloudflared-dns/tunnel:/etc/cloudflared'
    # ports:
      # - "43697:43697/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.4

  caddy:
    image: slxpi/caddy-cloudflare
    container_name: caddy-cloudflare-web-server
    platform: "linux/arm64"
    build:
      context: .
      dockerfile: caddy.Dockerfile
    restart: always
    cap_add:
      - NET_ADMIN
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      wg-easy:
        ipv4_address: 10.8.1.5



  # immich-server:
  #   image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
  #   container_name: immich_server
  #   platform: "linux/arm64"
  #   restart: always
  #   command: ['start.sh', 'immich']
  #   volumes:
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - .env
  #   # ports:
  #     # - 2283:3001
  #   depends_on:
  #     - immich_redis
  #     - immich_database
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.6

  # immich-microservices:
  #   image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
  #   container_name: immich_microservices
  #   platform: "linux/arm64"
  #   restart: always
  #   # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
  #   #   file: ./immich/hwaccel.transcoding.yml
  #   #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
  #   command: ['start.sh', 'microservices']
  #   volumes:
  #     - ${UPLOAD_LOCATION}:/usr/src/app/upload
  #     - /etc/localtime:/etc/localtime:ro
  #   env_file:
  #     - .env
  #   depends_on:
  #     - immich_redis
  #     - immich_database
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.7

  # immich-machine-learning:
  #   container_name: immich_machine_learning
  #   restart: always
  #   # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
  #   # Example tag: ${IMMICH_VERSION:-release}-cuda
  #   image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
  #   platform: "linux/arm64"
  #   # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
  #   #   file: ./immich/hwaccel.ml.yml
  #   #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
  #   volumes:
  #     - ${ML_MODEL_CACHE_LOCATION}:/cache
  #   env_file:
  #     - .env
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.8

  # immich_redis:
  #   image: redis:6.2-alpine
  #   platform: "linux/arm64"
  #   container_name: immich_redis
  #   restart: always
  #   hostname: redis
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.9

  # immich_database:
  #   image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
  #   platform: "linux/arm64"
  #   container_name: immich_postgres
  #   restart: always
  #   hostname: database
  #   environment:
  #     POSTGRES_PASSWORD: ${DB_PASSWORD}
  #     POSTGRES_USER: ${DB_USERNAME}
  #     POSTGRES_DB: ${DB_DATABASE_NAME}
  #   volumes:
  #     - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.10





  # photoprism:
  #   ## Use photoprism/photoprism:preview-arm64 for testing preview builds:
  #   image: photoprism/photoprism:arm64
  #   platform: "linux/arm64"
  #   ## Don't enable automatic restarts until PhotoPrism has been properly configured and tested!
  #   ## If the service gets stuck in a restart loop, this points to a memory, filesystem, network, or database issue:
  #   ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
  #   # restart: unless-stopped
  #   stop_grace_period: 10s
  #   depends_on:
  #     - mariadb
  #   security_opt:
  #     - seccomp:unconfined
  #     - apparmor:unconfined
  #   ## Server port mapping in the format "Host:Container". To use a different port, change the host port on
  #   ## the left-hand side and keep the container port, e.g. "80:2342" (for HTTP) or "443:2342 (for HTTPS):
  #   # ports:
  #   #   - "2342:2342"
  #   ## Before you start the service, please check the following config options (and change them as needed):
  #   ## https://docs.photoprism.app/getting-started/config-options/
  #   environment:
  #     PHOTOPRISM_ADMIN_USER: ${PHOTOPRISM_ADMIN_USER}                 # admin login username
  #     PHOTOPRISM_ADMIN_PASSWORD: ${PHOTOPRISM_ADMIN_PASSWORD}          # initial admin password (8-72 characters)
  #     PHOTOPRISM_AUTH_MODE: "password"               # authentication mode (public, password)
  #     PHOTOPRISM_SITE_URL: "https://photoprism.pi.rahulja.in/"  # server URL in the format "http(s)://domain.name(:port)/(path)"
  #     PHOTOPRISM_DISABLE_TLS: "true"                # disables HTTPS/TLS even if the site URL starts with https:// and a certificate is available
  #     PHOTOPRISM_DEFAULT_TLS: "false"                 # defaults to a self-signed HTTPS/TLS certificate if no other certificate is available
  #     PHOTOPRISM_ORIGINALS_LIMIT: 5000               # file size limit for originals in MB (increase for high-res video)
  #     PHOTOPRISM_HTTP_COMPRESSION: "gzip"            # improves transfer speed and bandwidth utilization (none or gzip)
  #     PHOTOPRISM_WORKERS: 2                          # limits the number of indexing workers to reduce system load
  #     PHOTOPRISM_LOG_LEVEL: "warning"                   # log level: trace, debug, info, warning, error, fatal, or panic
  #     PHOTOPRISM_READONLY: "false"                   # do not modify originals directory (reduced functionality)
  #     PHOTOPRISM_EXPERIMENTAL: "true"               # enables experimental features
  #     PHOTOPRISM_DISABLE_CHOWN: "false"              # disables updating storage permissions via chmod and chown on startup
  #     PHOTOPRISM_DISABLE_WEBDAV: "false"             # disables built-in WebDAV server
  #     PHOTOPRISM_DISABLE_SETTINGS: "false"           # disables Settings in Web UI
  #     PHOTOPRISM_DISABLE_TENSORFLOW: "false"         # disables all features depending on TensorFlow
  #     PHOTOPRISM_DISABLE_FACES: "false"              # disables face detection and recognition (requires TensorFlow)
  #     PHOTOPRISM_DISABLE_CLASSIFICATION: "false"     # disables image classification (requires TensorFlow)
  #     PHOTOPRISM_DISABLE_VECTORS: "false"            # disables vector graphics support
  #     PHOTOPRISM_DISABLE_RAW: "false"                # disables indexing and conversion of RAW images
  #     PHOTOPRISM_RAW_PRESETS: "false"                # enables applying user presets when converting RAW images (reduces performance)
  #     PHOTOPRISM_JPEG_QUALITY: 85                    # a higher value increases the quality and file size of JPEG images and thumbnails (25-100)
  #     PHOTOPRISM_DETECT_NSFW: "false"                # automatically flags photos as private that MAY be offensive (requires TensorFlow)
  #     PHOTOPRISM_UPLOAD_NSFW: "true"                 # allow uploads that MAY be offensive
  #     # PHOTOPRISM_DATABASE_DRIVER: "sqlite"         # SQLite is an embedded database that doesn't require a server
  #     PHOTOPRISM_DATABASE_DRIVER: "mysql"            # use MariaDB 10.5+ or MySQL 8+ instead of SQLite for improved performance
  #     PHOTOPRISM_DATABASE_SERVER: "mariadb:3306"     # MariaDB or MySQL database server (hostname:port)
  #     PHOTOPRISM_DATABASE_NAME: ${DB_DATABASE_NAME}         # MariaDB or MySQL database schema name
  #     PHOTOPRISM_DATABASE_USER: ${DB_USERNAME}         # MariaDB or MySQL database user name
  #     PHOTOPRISM_DATABASE_PASSWORD: ${DB_PASSWORD}       # MariaDB or MySQL database user password
  #     PHOTOPRISM_SITE_CAPTION: "AI-Powered Photos App"
  #     PHOTOPRISM_SITE_DESCRIPTION: ""                # meta site description
  #     PHOTOPRISM_SITE_AUTHOR: "Rahul Jain"                     # meta site author
  #     ## Video Transcoding (https://docs.photoprism.app/getting-started/advanced/transcoding/):
  #     # PHOTOPRISM_FFMPEG_ENCODER: "software"        # H.264/AVC encoder (software, intel, nvidia, apple, raspberry, or vaapi)
  #     # PHOTOPRISM_FFMPEG_SIZE: "1920"               # video size limit in pixels (720-7680) (default: 3840)
  #     # PHOTOPRISM_FFMPEG_BITRATE: "32"              # video bitrate limit in Mbit/s (default: 50)
  #     ## Run/install on first startup (options: update, gpu, tensorflow, davfs, clean):
  #     # PHOTOPRISM_INIT: "update clean"
  #     ## Run as a non-root user after initialization (supported: 0, 33, 50-99, 500-600, and 900-1200):
  #     # PHOTOPRISM_UID: 1000
  #     # PHOTOPRISM_GID: 1000
  #     # PHOTOPRISM_UMASK: 0000
  #   ## Share hardware devices with FFmpeg and TensorFlow (optional):
  #   ## See: https://www.raspberrypi.com/documentation/accessories/camera.html#driver-differences-when-using-libcamera-or-the-legacy-stack
  #   # devices:
  #   #  - "/dev/video11:/dev/video11" # Video4Linux Video Encode Device (h264_v4l2m2m)
  #   working_dir: "/photoprism" # do not change or remove
  #   ## Storage Folders: "~" is a shortcut for your home directory, "." for the current directory
  #   volumes:
  #     # "/host/folder:/photoprism/folder"                # Example
  #     - ${PHOTOPRISM_UPLOAD_LOCATION}:/photoprism/originals               # Original media files (DO NOT REMOVE)
  #     # - "/example/family:/photoprism/originals/family" # *Additional* media folders can be mounted like this
  #     # - "~/Import:/photoprism/import"                  # *Optional* base folder from which files can be imported to originals
  #     - "./photoprism_storage:/photoprism/storage"                  # *Writable* storage folder for cache, database, and sidecar files (DO NOT REMOVE)
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.11

  # mariadb:
  #   image: arm64v8/mariadb:11 # ARM64 IMAGE ONLY, DOES NOT WORK ON ARMv7, AMD or Intel
  #   platform: "linux/arm64"
  #   ## If MariaDB gets stuck in a restart loop, this points to a memory or filesystem issue:
  #   ## https://docs.photoprism.app/getting-started/troubleshooting/#fatal-server-errors
  #   restart: unless-stopped
  #   stop_grace_period: 5s
  #   security_opt: # see https://github.com/MariaDB/mariadb-docker/issues/434#issuecomment-1136151239
  #     - seccomp:unconfined
  #     - apparmor:unconfined
  #   command: --innodb-buffer-pool-size=256M --transaction-isolation=READ-COMMITTED --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci --max-connections=512 --innodb-rollback-on-timeout=OFF --innodb-lock-wait-timeout=120
  #   volumes:
  #     - "./mariadb_database:/var/lib/mysql" # DO NOT REMOVE
  #   environment:
  #     MARIADB_AUTO_UPGRADE: "1"
  #     MARIADB_INITDB_SKIP_TZINFO: "1"
  #     MARIADB_DATABASE: ${DB_DATABASE_NAME}
  #     MARIADB_USER: ${DB_USERNAME}
  #     MARIADB_PASSWORD: ${DB_PASSWORD}
  #     MARIADB_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #   networks:
  #     wg-easy:
  #       ipv4_address: 10.8.1.12



  nextcloud-aio-mastercontainer:
    image: nextcloud/all-in-one:latest
    init: true
    restart: always
    container_name: nextcloud-aio-mastercontainer # This line is not allowed to be changed as otherwise AIO will not work correctly
    volumes:
      - nextcloud_aio_mastercontainer:/mnt/docker-aio-config # This line is not allowed to be changed as otherwise the built-in backup solution will not work
      - /var/run/docker.sock:/var/run/docker.sock:ro # May be changed on macOS, Windows or docker rootless. See the applicable documentation. If adjusting, don't forget to also set 'WATCHTOWER_DOCKER_SOCKET_PATH'!
    ports:
      # - 80:80 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      - 8686:8080
      # - 8443:8443 # Can be removed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
    environment: # Is needed when using any of the options below
      # AIO_DISABLE_BACKUP_SECTION: false # Setting this to true allows to hide the backup section in the AIO interface. See https://github.com/nextcloud/all-in-one#how-to-disable-the-backup-section
      SKIP_DOMAIN_VALIDATION: true
      APACHE_PORT: 11000 # Is needed when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else). See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      APACHE_IP_BINDING: 0.0.0.0 # Should be set when running behind a web server or reverse proxy (like Apache, Nginx, Cloudflare Tunnel and else) that is running on the same host. See https://github.com/nextcloud/all-in-one/blob/main/reverse-proxy.md
      # BORG_RETENTION_POLICY: --keep-within=7d --keep-weekly=4 --keep-monthly=6 # Allows to adjust borgs retention policy. See https://github.com/nextcloud/all-in-one#how-to-adjust-borgs-retention-policy
      # COLLABORA_SECCOMP_DISABLED: false # Setting this to true allows to disable Collabora's Seccomp feature. See https://github.com/nextcloud/all-in-one#how-to-disable-collaboras-seccomp-feature
      # NEXTCLOUD_DATADIR: /mnt/ncdata # Allows to set the host directory for Nextcloud's datadir. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Warning: do not set or adjust this value after the initial Nextcloud installation is done! See https://github.com/nextcloud/all-in-one#how-to-change-the-default-location-of-nextclouds-datadir
      # NEXTCLOUD_MOUNT: /mnt/ # Allows the Nextcloud container to access the chosen directory on the host. See https://github.com/nextcloud/all-in-one#how-to-allow-the-nextcloud-container-to-access-directories-on-the-host
      # NEXTCLOUD_UPLOAD_LIMIT: 10G # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-upload-limit-for-nextcloud
      # NEXTCLOUD_MAX_TIME: 3600 # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-max-execution-time-for-nextcloud
      # NEXTCLOUD_MEMORY_LIMIT: 512M # Can be adjusted if you need more. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-php-memory-limit-for-nextcloud
      # NEXTCLOUD_TRUSTED_CACERTS_DIR: /path/to/my/cacerts # CA certificates in this directory will be trusted by the OS of the nexcloud container (Useful e.g. for LDAPS) See See https://github.com/nextcloud/all-in-one#how-to-trust-user-defined-certification-authorities-ca
      # NEXTCLOUD_STARTUP_APPS: deck twofactor_totp tasks calendar contacts notes # Allows to modify the Nextcloud apps that are installed on starting AIO the first time. See https://github.com/nextcloud/all-in-one#how-to-change-the-nextcloud-apps-that-are-installed-on-the-first-startup
      # NEXTCLOUD_ADDITIONAL_APKS: imagemagick # This allows to add additional packages to the Nextcloud container permanently. Default is imagemagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-os-packages-permanently-to-the-nextcloud-container
      # NEXTCLOUD_ADDITIONAL_PHP_EXTENSIONS: imagick # This allows to add additional php extensions to the Nextcloud container permanently. Default is imagick but can be overwritten by modifying this value. See https://github.com/nextcloud/all-in-one#how-to-add-php-extensions-permanently-to-the-nextcloud-container
      # NEXTCLOUD_ENABLE_DRI_DEVICE: true # This allows to enable the /dev/dri device in the Nextcloud container. ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è Warning: this only works if the '/dev/dri' device is present on the host! If it should not exist on your host, don't set this to true as otherwise the Nextcloud container will fail to start! See https://github.com/nextcloud/all-in-one#how-to-enable-hardware-transcoding-for-nextcloud
      # NEXTCLOUD_KEEP_DISABLED_APPS: false # Setting this to true will keep Nextcloud apps that are disabled in the AIO interface and not uninstall them if they should be installed. See https://github.com/nextcloud/all-in-one#how-to-keep-disabled-apps
      # TALK_PORT: 3478 # This allows to adjust the port that the talk container is using. See https://github.com/nextcloud/all-in-one#how-to-adjust-the-talk-port
      # WATCHTOWER_DOCKER_SOCKET_PATH: /var/run/docker.sock # Needs to be specified if the docker socket on the host is not located in the default '/var/run/docker.sock'. Otherwise mastercontainer updates will fail. For macos it needs to be '/var/run/docker.sock'
    networks: # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file
      # - nextcloud-aio # Is needed when you want to create the nextcloud-aio network with ipv6-support using this file, see the network config at the bottom of the file
      wg-easy:
        ipv4_address: 10.8.1.13
    # security_opt: ["label:disable"] # Is needed when using SELinux




volumes: # If you want to store the data on a different drive, see https://github.com/nextcloud/all-in-one#how-to-store-the-filesinstallation-on-a-separate-drive
  nextcloud_aio_mastercontainer:
    name: nextcloud_aio_mastercontainer # This line is not allowed to be changed as otherwise the built-in backup solution will not work




networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24
