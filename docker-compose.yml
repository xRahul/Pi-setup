services:



  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the server's hostname (clients will connect to):
      - WG_HOST=${WG_EASY__WG_HOST}
      # ‚ö†Ô∏è Change the Web UI Password:
      # - PASSWORD=${WG_EASY__PASSWORD}
      - PASSWORD_HASH=${WG_EASY__PASSWORD_HASH}
      # üí° This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.3
      #- WG_DEFAULT_DNS=1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4
      - WG_DEFAULT_ADDRESS=10.8.0.x
      # traffic stats
      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=2
    volumes:
      - './wg-easy-vol:/etc/wireguard'
    ports:
      - "51820:51820/udp"
      # - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2



  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    hostname: pihole
    platform: "linux/arm64"
    restart: always
    environment:
      # ‚ö†Ô∏è Change the Web UI Password:
      - WEBPASSWORD=${PIHOLE__WEBPASSWORD}
      - TZ=${DEFAULT_TZ}
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "5353:80/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3



  cloudflared-dns:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-dns-tunnel
    hostname: cloudflareddnstunnel
    user: 1000:1000 # should be owner of volumes
    platform: "linux/arm64"
    restart: always
    command: proxy-dns
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.0.0.1/dns-query,https://1.1.1.1/dns-query"
      # Listen on an unprivileged port
      TUNNEL_DNS_PORT: 5053
      # Listen on all interfaces
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      # Tunnel metrics
      TUNNEL_METRICS: 10.8.1.4:43697
    volumes:
      - './cloudflared-dns/tunnel:/etc/cloudflared'
    # ports:
      # - "43697:43697/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.4



  caddy:
    image: slxpi/caddy-cloudflare
    container_name: caddy-cloudflare-web-server
    hostname: caddycloudflarewebserver
    platform: "linux/arm64"
    user: 1000:1000 # should be owner of volumes
    build:
      context: .
      dockerfile: caddy.Dockerfile
    restart: always
    cap_add:
      - NET_ADMIN
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      wg-easy:
        ipv4_address: 10.8.1.5



  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich_server
    hostname: immichserver
    user: 1000:1000 # should be owner of volumes
    restart: always
    # command: ['start.sh', 'immich']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - ./.immich_env
    healthcheck:
      disable: false
    # ports:
      # - 2283:3001
    depends_on:
      - immich_redis
      - immich_database
    networks:
      wg-easy:
        ipv4_address: 10.8.1.6



  immich-machine-learning:
    container_name: immich_machine_learning
    hostname: immichmachinelearning
    restart: always
    user: 1000:1000 # should be owner of volumes
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: ./immich/hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - ${ML_MODEL_CACHE_LOCATION}:/cache
    env_file:
      - ./.immich_env
    healthcheck:
      disable: false
    networks:
      wg-easy:
        ipv4_address: 10.8.1.8



  immich_redis:
    image: docker.io/redis:6.2-alpine@sha256:2ba50e1ac3a0ea17b736ce9db2b0a9f6f8b85d4c27d5f5accc6a416d8f42c6d5
    container_name: immich_redis
    restart: always
    healthcheck:
      test: redis-cli ping || exit 1
    hostname: redis
    env_file:
      - .immich_env
    networks:
      wg-easy:
        ipv4_address: 10.8.1.9



  immich_database:
    image: docker.io/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    container_name: immich_postgres
    restart: always
    hostname: database
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      POSTGRES_INITDB_ARGS: '--data-checksums'
    env_file:
      - ./.immich_env
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    healthcheck:
      test: pg_isready --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' || exit 1; Chksum="$$(psql --dbname='${DB_DATABASE_NAME}' --username='${DB_USERNAME}' --tuples-only --no-align --command='SELECT COALESCE(SUM(checksum_failures), 0) FROM pg_stat_database')"; echo "checksum failure count is $$Chksum"; [ "$$Chksum" = '0' ] || exit 1
      interval: 5m
      start_interval: 30s
      start_period: 5m
    command:
      [
        'postgres',
        '-c',
        'shared_preload_libraries=vectors.so',
        '-c',
        'search_path="$$user", public, vectors',
        '-c',
        'logging_collector=on',
        '-c',
        'max_wal_size=2GB',
        '-c',
        'shared_buffers=512MB',
        '-c',
        'wal_compression=on',
      ]
    networks:
      wg-easy:
        ipv4_address: 10.8.1.10



  jellyfin:
    image: jellyfin/jellyfin:latest
    container_name: jellyfin
    hostname: jellyfin
    user: 1000:1000 # should be owner of volumes
    platform: "linux/arm64"
    restart: always
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    volumes:
      - ${JELLYFIN_CONFIG_LOCATION}:/config
      - ${JELLYFIN_CACHE_LOCATION}:/cache
      - type: bind
        source: ${JELLYFIN_MEDIA_LOCATION}
        target: /media
      - type: bind
        source: ${JELLYFIN_DOWNLOAD_LOCATION}
        target: /download
    # Optional - alternative address used for autodiscovery
    environment:
      - JELLYFIN_PublishedServerUrl=https://jellyfin.pi.rahulja.in
    networks:
      wg-easy:
        ipv4_address: 10.8.1.16



  gluetun:
    image: qmcgaw/gluetun
    container_name: gluetun
    restart: always
    cap_add:
      - NET_ADMIN
    devices:
      - /dev/net/tun
    volumes:
      - ${GLUETUN_DATA_SOURCE}:/gluetun
    environment:
      TZ: ${DEFAULT_TZ}
      # Wireguard
      VPN_SERVICE_PROVIDER: surfshark
      VPN_TYPE: wireguard
      WIREGUARD_PRIVATE_KEY: ${SURFSHARK_WG_PRIVATE_KEY}
      WIREGUARD_ADDRESSES: ${WIREGUARD_ADDRESSES}
      SERVER_COUNTRIES: ${SURFSHARK_SERVER_COUNTRIES}
      # # OpenVPN
      # VPN_SERVICE_PROVIDER: nordvpn
      # VPN_TYPE: openvpn
      # OPENVPN_USER: $NORDVPN_USERNAME
      # OPENVPN_USER: $NORDVPN_PASSWORD
    # ports:
    #   - 9091:9091
    #   - 51413:51413/udp
    #   - 51413:51413
    networks:
      wg-easy:
        ipv4_address: 10.8.1.23



  transmission:
    image: linuxserver/transmission
    container_name: transmission
    restart: always
    network_mode: "service:gluetun"
    volumes:
      - ${TRANSMISSION_CONFIG_SOURCE}:/config
      - ${TRANSMISSION_DOWNLOAD_SOURCE}:/downloads
      - ${TRANSMISSION_WATCH_SOURCE}:/watch
    environment:
      - PGID=1000
      - PUID=1000
      - TZ=${DEFAULT_TZ}
      # - DOCKER_MODS=linuxserver/mods:transmission-floodui
      - DOCKER_MODS=linuxserver/mods:transmission-transmissionic
      - USER=${TRANSMISSION_USERNAME}
      - PASS=${TRANSMISSION_PASSWORD}



  miniflux:
    image: miniflux/miniflux:latest
    container_name: miniflux
    restart: always
    # ports:
    #   - "80:8080"
    # depends_on:
    #   miniflux_db:
    #     condition: service_healthy
    environment:
      - DATABASE_URL=${MINIFLUX_DB_URL}
      - RUN_MIGRATIONS=1
      - CREATE_ADMIN=1
      - ADMIN_USERNAME=${MINIFLUX_ADMIN_USER}
      - ADMIN_PASSWORD=${MINIFLUX_ADMIN_PASS}
      - POLLING_FREQUENCY=120
      - POLLING_SCHEDULER=entry_frequency
      - SCHEDULER_ENTRY_FREQUENCY_MAX_INTERVAL=1440
      - SCHEDULER_ENTRY_FREQUENCY_MIN_INTERVAL=120
      - SCHEDULER_ROUND_ROBIN_MIN_INTERVAL=120
      - CLEANUP_ARCHIVE_READ_DAYS=0
      - CLEANUP_ARCHIVE_UNREAD_DAYS=-1
      - WEBAUTHN=true
      - BASE_URL=https://miniflux.pi.rahulja.in
      - DATABASE_MIN_CONNS=0
      - DATABASE_CONNECTION_LIFETIME=1
    healthcheck:
      test: ["CMD", "/usr/bin/miniflux", "-healthcheck", "auto"]
      interval: 10m
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.28



  shiori:
    image: ghcr.io/go-shiori/shiori
    container_name: shiori
    # ports:
    #   - "8080:8080"
    volumes:
      - ${SHIORI_DEV_DATA_PATH}:/srv/shiori
    restart: always
    # links:
    #   - "postgres"
    #   - "mariadb"
    environment:
      SHIORI_DIR: /srv/shiori
      # SHIORI_DATABASE_URL: mysql://shiori:shiori@(mariadb)/shiori?charset=utf8mb4
      # SHIORI_DATABASE_URL: postgres://shiori:shiori@postgres/shiori?sslmode=disable
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.31



  paperless-ngx:
    image: ghcr.io/paperless-ngx/paperless-ngx:latest
    container_name: paperless-ngx
    restart: always
    depends_on:
      - immich_redis
    # ports:
    #   - "8000:8000"
    volumes:
      - ${PAPERLESS_NGX_DATA_PATH}:/usr/src/paperless/data
      - ${PAPERLESS_NGX_MEDIA_PATH}:/usr/src/paperless/media
      - ${PAPERLESS_NGX_EXPORT_PATH}:/usr/src/paperless/export
      - ${PAPERLESS_NGX_CONSUME_PATH}:/usr/src/paperless/consume
    environment:
      PAPERLESS_REDIS: redis://redis:6379
      PAPERLESS_TIME_ZONE: ${DEFAULT_TZ}
      PAPERLESS_URL: ${PAPERLESS_NGX_URL}
      PAPERLESS_SECRET_KEY: ${PAPERLESS_NGX_SECRET_KEY}
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.32



  filebrowser:
    image: filebrowser/filebrowser:s6
    container_name: filebrowser
    volumes:
      - ${FILEBROWSER_ROOT_PATH}:/srv
      - ${FILEBROWSER_DB_FILE_PATH}:/database/filebrowser.db
      - ${FILEBROWSER_CONFIG_SETTING_FILE_PATH}:/config/settings.json
    environment:
      - PUID=1000
      - PGID=1000
    # ports:
    #   - 8080:80
    restart: always
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.34



  homarr:
    image: ghcr.io/ajnart/homarr:latest
    container_name: homarr
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Optional, only if you want docker integration
      - ${HOMARR_CONFIGS_PATH}:/app/data/configs
      - ${HOMARR_ICONS_PATH}:/app/public/icons
      - ${HOMARR_DATA_PATH}:/data
    # ports:
    #   - '7575:7575'
    restart: always
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.35



  memos:
    image: neosmemo/memos:stable
    container_name: memos
    restart: always
    volumes:
      - ${MEMOS_DATA_PATH}:/var/opt/memos
    # ports:
    #   - 5230:5230
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.41



  firefly:
    image: fireflyiii/core:latest
    hostname: firefly
    container_name: firefly
    restart: always
    volumes:
      - ${FIREFLY_UPLOAD_PATH}:/var/www/html/storage/upload
      - ${FIREFLY_DB_PATH}:/var/www/html/storage/database
    environment:
      # - APP_ENV=production
      # - APP_DEBUG=false
      # - DEFAULT_LANGUAGE=en_US
      # - DEFAULT_LOCALE=equal
      # - LOG_CHANNEL=stack
      # - APP_LOG_LEVEL=notice
      - SITE_OWNER=me@rahulja.in
      - TRUSTED_PROXIES=**
      - AUDIT_LOG_LEVEL=emergency
      - DB_CONNECTION=sqlite
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - ENABLE_EXCHANGE_RATES=true
      - ENABLE_EXTERNAL_RATES=true
      - APP_URL=https://firefly.pi.rahulja.in
      # - REDIS_SCHEME=tcp
      # - REDIS_DB="0"
      # - REDIS_CACHE_DB="1"
      # - COOKIE_PATH="/"
      # - COOKIE_DOMAIN=
      # - COOKIE_SECURE=false
      # - COOKIE_SAMESITE=lax
      # - MAIL_MAILER=log
      # - MAIL_HOST=null
      # - MAIL_PORT=2525
      # - MAIL_FROM=changeme@example.com
      # - MAIL_USERNAME=null
      # - MAIL_PASSWORD=null
      # - MAIL_ENCRYPTION=null
      # - STATIC_CRON_TOKEN=
      - APP_KEY=${FIREFLY_APP_KEY}
      - TZ=${DEFAULT_TZ}

    # ports:
    #   - '80:8080'
    depends_on:
      - immich_redis
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.43



  firefly-importer:
    image: fireflyiii/data-importer:latest
    hostname: firefly-importer
    restart: always
    container_name: firefly-importer
    # networks:
    #   - firefly_iii
    # ports:
    #   - '81:8080'
    depends_on:
      - firefly
      - immich_redis
    environment:
      - FIREFLY_III_URL=http://firefly:8080
      - VANITY_URL=https://firefly.pi.rahulja.in
      - LOG_LEVEL=info
      - TRUSTED_PROXIES=**
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - TZ=${DEFAULT_TZ}
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.44



  vikunja:
    image: vikunja/vikunja
    container_name: vikunja
    environment:
      VIKUNJA_SERVICE_JWTSECRET: ${VIKUNJA_JWTSECRET}
      VIKUNJA_SERVICE_PUBLICURL: https://vikunja.pi.rahulja.in/
      # Note the default path is /app/vikunja/vikunja.db.
      # This config variable moves it to a different folder so you can use a volume and
      # store the database file outside the container so state is persisted even if the container is destroyed.
      VIKUNJA_DATABASE_PATH: /db/vikunja.db
    # ports:
    #   - 3456:3456
    volumes:
      - ${VIKUNJA_FILES_PATH}:/app/vikunja/files
      - ${VIKUNJA_DB_PATH}:/db
    restart: always
    dns:
      - 10.8.1.3
      - 1.1.1.1
      - 8.8.8.8
    networks:
      wg-easy:
        ipv4_address: 10.8.1.46



# Booked 10.8.1.2 - 10.8.1.47

networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24
