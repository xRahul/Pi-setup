services:
  wg-easy:
    image: ghcr.io/wg-easy/wg-easy:latest
    container_name: wg-easy
    restart: always
    environment:
      # ‚ö†Ô∏è Change the server's hostname (clients will connect to):
      - WG_HOST=${WG_EASY__WG_HOST}
      # ‚ö†Ô∏è Change the Web UI Password:
      - PASSWORD=${WG_EASY__PASSWORD}
      # üí° This is the Pi-Hole Container's IP Address
      - WG_DEFAULT_DNS=10.8.1.3
      #- WG_DEFAULT_DNS=1.1.1.1,1.0.0.1,8.8.8.8,8.8.4.4
      - WG_DEFAULT_ADDRESS=10.8.0.x
      # traffic stats
      - UI_TRAFFIC_STATS=true
      - UI_CHART_TYPE=2
    volumes:
      - './wg-easy-vol:/etc/wireguard'
    ports:
      - "51820:51820/udp"
      # - "51821:51821/tcp"
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    sysctls:
      - net.ipv4.ip_forward=1
      - net.ipv4.conf.all.src_valid_mark=1
    networks:
      wg-easy:
        ipv4_address: 10.8.1.2

  pihole:
    image: pihole/pihole:latest
    container_name: pihole
    restart: always
    environment:
      # ‚ö†Ô∏è Change the Web UI Password:
      - WEBPASSWORD=${PIHOLE__WEBPASSWORD}
      - TZ=${PIHOLE__TZ}
    volumes:
      - './pihole/etc-pihole:/etc/pihole'
      - './pihole/etc-dnsmasq.d:/etc/dnsmasq.d'
    # ports:
      # - "53:53/tcp"
      # - "53:53/udp"
      # - "5353:80/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.3

  cloudflared-dns:
    image: cloudflare/cloudflared:latest
    container_name: cloudflared-dns-tunnel
    restart: always
    command: proxy-dns
    environment:
      TUNNEL_DNS_UPSTREAM: "https://1.0.0.1/dns-query,https://1.1.1.1/dns-query"
      # Listen on an unprivileged port
      TUNNEL_DNS_PORT: 5053
      # Listen on all interfaces
      TUNNEL_DNS_ADDRESS: "0.0.0.0"
      # Tunnel metrics
      TUNNEL_METRICS: 10.8.1.4:43697
    volumes:
      - './cloudflared-dns/tunnel:/etc/cloudflared'
    # ports:
      # - "43697:43697/tcp"
    networks:
      wg-easy:
        ipv4_address: 10.8.1.4

  caddy:
    image: slxpi/caddy-cloudflare
    container_name: caddy-cloudflare-web-server
    build:
      context: .
      dockerfile: caddy.Dockerfile
    restart: always
    cap_add:
      - NET_ADMIN
    environment:
      - CLOUDFLARE_API_TOKEN=${CLOUDFLARE_API_TOKEN}
    ports:
      - "80:80"
      # - "443:443"
      # - "443:443/udp"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - ./caddy/site:/srv
      - ./caddy/data:/data
      - ./caddy/config:/config
    networks:
      wg-easy:
        ipv4_address: 10.8.1.5



  immich-server:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich_server
    restart: always
    command: ['start.sh', 'immich']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    # ports:
      # - 2283:3001
    depends_on:
      - immich_redis
      - immich_database
    networks:
      wg-easy:
        ipv4_address: 10.8.1.6

  immich-microservices:
    image: ghcr.io/immich-app/immich-server:${IMMICH_VERSION:-release}
    container_name: immich_microservices
    restart: always
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/hardware-transcoding
    #   file: ./immich/hwaccel.transcoding.yml
    #   service: cpu # set to one of [nvenc, quicksync, rkmpp, vaapi, vaapi-wsl] for accelerated transcoding
    command: ['start.sh', 'microservices']
    volumes:
      - ${UPLOAD_LOCATION}:/usr/src/app/upload
      - /etc/localtime:/etc/localtime:ro
    env_file:
      - .env
    depends_on:
      - immich_redis
      - immich_database
    networks:
      wg-easy:
        ipv4_address: 10.8.1.7

  immich-machine-learning:
    container_name: immich_machine_learning
    restart: always
    # For hardware acceleration, add one of -[armnn, cuda, openvino] to the image tag.
    # Example tag: ${IMMICH_VERSION:-release}-cuda
    image: ghcr.io/immich-app/immich-machine-learning:${IMMICH_VERSION:-release}
    # extends: # uncomment this section for hardware acceleration - see https://immich.app/docs/features/ml-hardware-acceleration
    #   file: ./immich/hwaccel.ml.yml
    #   service: cpu # set to one of [armnn, cuda, openvino, openvino-wsl] for accelerated inference - use the `-wsl` version for WSL2 where applicable
    volumes:
      - ${ML_MODEL_CACHE_LOCATION}:/cache
    env_file:
      - .env
    networks:
      wg-easy:
        ipv4_address: 10.8.1.8

  immich_redis:
    image: registry.hub.docker.com/library/redis:6.2-alpine@sha256:84882e87b54734154586e5f8abd4dce69fe7311315e2fc6d67c29614c8de2672
    container_name: immich_redis
    restart: always
    hostname: redis
    networks:
      wg-easy:
        ipv4_address: 10.8.1.9

  immich_database:
    image: registry.hub.docker.com/tensorchord/pgvecto-rs:pg14-v0.2.0@sha256:90724186f0a3517cf6914295b5ab410db9ce23190a2d9d0b9dd6463e3fa298f0
    container_name: immich_postgres
    restart: always
    hostname: database
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
    volumes:
      - ${DB_DATA_LOCATION}:/var/lib/postgresql/data
    networks:
      wg-easy:
        ipv4_address: 10.8.1.10


networks:
  wg-easy:
    ipam:
      config:
        - subnet: 10.8.1.0/24
